#!/usr/bin/env pandda.python

import os, sys, copy, glob
import shutil
import pandas
import libtbx.phil

#################################
import matplotlib
matplotlib.use('Agg')
matplotlib.interactive(0)
from matplotlib import pyplot
pyplot.style.use('ggplot')
##################################

from bamboo.common.command import CommandManager

blank_arg_prepend = {None:'dir=', '.pdb':'pdb=', '.mtz':'mtz='}

master_phil = libtbx.phil.parse("""
input {
    dir = None
        .type = path
        .multiple = True
    pdb_style = "*.dimple.pdb"
        .type = str
        .multiple = False
    mtz_style = "*.dimple.mtz"
      .type = str
        .multiple = False
}
output {
    log = "ringer.log"
        .type = str
        .multiple = False
}
settings {
    # XXX mmtbx.ringer can only take this an integer, >1 XXX#
    angle_sampling = 2
        .type = int
        .multiple = False
}
""")

############################################################################################
#                                   FUNCTIONS                                              #
############################################################################################

def process_with_ringer(pdb, mtz, angle_sampling, output_dir=None, output_base=None):
    """Analyse a pdb-mtz pair with mmtbx.ringer"""    
    
    assert os.path.exists(pdb), 'PDB File does not exist'
    assert os.path.exists(mtz), 'MTZ File does not exist'

    if not output_dir:  output_dir = os.path.dirname(pdb)
    if not output_base: output_base = os.path.splitext(os.path.basename(pdb))[0]

    # Check/create output directory
    if not os.path.exists(output_dir): os.mkdir(output_dir)

    output_csv = os.path.join(output_dir, output_base+'.csv')
    # Import pandas for utilising dataframes
    import pandas
    ###################################################
    #Run Ringer
    ###################################################

    # Only run if results don't already exist
    if not os.path.exists(output_csv):
        # Initialise and populate command object
        ringer = CommandManager(program='/usr/local/phenix/phenix-1.9-1682/build/intel-linux-2.6-x86_64/bin/mmtbx.ringer')
        ringer.add_command_line_arguments(pdb, mtz)
        ringer.add_command_line_arguments('sampling_angle={}'.format(angle_sampling))
        ringer.add_command_line_arguments('output_base={}'.format(os.path.join(output_dir, output_base)))
        # Print and run
        ringer.print_settings()
        ringer.run()
        # Write log
        ringer.write_output(os.path.join(output_dir, output_base+'.log'))

    # Check the output csv file exists
    output_csv = os.path.join(output_dir, output_base+'.csv')
    assert os.path.exists(output_csv), 'Ringer output CSV does not exist: {}'.format(output_csv)

    return output_csv

def normalise_and_sort_ringer_results(current_dataset_results,params):
    #Extract from current residue in dataset
    residue = current_dataset_results.index[0]
    start_ang  = current_dataset_results.values[0,2]
    ang_rel = params.settings.angle_sampling*current_dataset_results.columns.values[3:]-3
    map_values = current_dataset_results.values[0,3:]

    print 'Showing data for {}'.format(residue)
    # Set angles
    ang = (start_ang+ang_rel)%360
   
    ###################################################
    # Sort Angles
    ##################################################
    sorted_idx = sorted(range(len(ang)), key=lambda i: ang[i])
    sorted_angles = [ang[i] for i in sorted_idx]
    sorted_map_values = [map_values[i] for i in sorted_idx]
    
    return (sorted_angles,sorted_map_values)

def line_plot_ringer(sorted_angles,sorted_map_values,title,filename):

    fig=pyplot.figure()
    pyplot.plot(sorted_angles, sorted_map_values)
    pyplot.title(title)
    pyplot.xlabel('Angle')
    pyplot.tight_layout()
    pyplot.savefig(filename)
    pyplot.close(fig)

def multiple_line_plot_ringer(all_data_list,title, filename):

    fig=pyplot.figure()
    pyplot.title(title)
    
    for i in range(0,len(all_data_list)):
        sorted_angles=all_data_list[i][0]
        sorted_map_values=all_data_list[i][1]
        pyplot.plot(sorted_angles,sorted_map_values)
    
    pyplot.xlabel('Angle')
    pyplot.tight_layout()
    pyplot.savefig(filename)
    pyplot.close(fig)

def run(params):

    # Dictionary to store all of the 
    # ringer results for each of the 
    # datasets
    all_results = {}

    for dir in params.input.dir:
        # Label the dataset by the directory name
        label = os.path.basename(dir)
        pdb = glob.glob(os.path.join(dir, params.input.pdb_style))
        mtz = glob.glob(os.path.join(dir, params.input.mtz_style))
        assert pdb, 'No PDB Files found in {} matching {}'.format(dir, params.input.pdb_style)
        assert mtz, 'No MTZ Files found in {} matching {}'.format(dir, params.input.mtz_style)
        pdb = pdb[0]
        mtz = mtz[0]

        # Process dataset with ringer and convert results to DataFrame
        ringer_csv = process_with_ringer(pdb=pdb, mtz=mtz,angle_sampling=params.settings.angle_sampling, output_dir=dir)
        ringer_results = pandas.DataFrame.from_csv(ringer_csv, header=None)

        all_results[label] = ringer_results
        
    # Pull out the "first" ringer results set as a reference
    ref_set = all_results.values()[0]

    all_data_list = []
    
    # Map and angle types currently selected to analyse
    map_type = '2mFo-DFc'
    angle_type = 'chi1'

    # Iterate through the residues
    for residue, data in ref_set.iterrows():
        # Iterate through the datasets
        for dataset_label, dataset_results in all_results.iteritems():
            #from IPython import embed; embed()
            # Choose a map_type/angle_type
            dataset_results = dataset_results.loc[(dataset_results[1] == map_type)]
            dataset_results = dataset_results.loc[(dataset_results[2] == angle_type)]
             
            current_dataset_results = dataset_results.loc[(dataset_results.index == residue)]    
            
            sorted_angles, sorted_map_values = normalise_and_sort_ringer_results(current_dataset_results, params=params)
            line_plot_ringer(sorted_angles, sorted_map_values, title=residue, filename='{}-{}.png'.format(residue, dataset_label))   

            # Store these in a list
            all_data_list.append((sorted_angles, sorted_map_values))
        # Print results for all of the datasets for this residue in the same graph
        multiple_line_plot_ringer(all_data_list,title=residue, filename='all-{}-{}-dataset.png'.format(residue, len(all_data_list)))   
        break

        ####################################################
        # Create output dataframe for each angle for each residue
        ###################################################

#        output = pandas.DataFrame(index=[1,2,3], columns=['a','f'])
#        # column
#        output['a']
#        # row
#        output.loc[1]
#       
#
#
# 
#        output = pandas.DataFrame(index=[], columns=angles)
#
#        # append to results
#        output.loc['dataset1'] = new_map_data
#
       # out_residue_ang = pandas.DataFrame(index=['{}'.format(angle_type)],columns=sorted_angles)
       # out_residue_ang.loc['{}'.format(angle_type)]=sorted_values  
        ###################################################
        # Create CSV by RESIDUE & BY ANGLE & BY MAP_TYPE
        ###################################################
       # pandas.DataFrame.to_csv(out_residue_ang,'{}{}-ringer.csv'.format(residue,map_type),mode='a')
        ##################################################
        # APPEND to existing output files? (other datasets)
        #################################################



if __name__ == '__main__':
    from giant.jiffies import run_default
    run_default(run=run, master_phil=master_phil, args=sys.argv[1:], blank_arg_prepend=blank_arg_prepend)
